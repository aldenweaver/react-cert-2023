{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red13\green14\blue17;\red255\green255\blue255;\red5\green40\blue131;
\red141\green0\blue24;\red78\green16\blue174;\red0\green0\blue0;\red13\green14\blue17;\red9\green61\blue20;
\red141\green0\blue24;\red5\green40\blue131;\red78\green16\blue174;\red92\green32\blue1;\red9\green61\blue20;
\red83\green93\blue104;\red92\green32\blue1;\red156\green167\blue179;\red212\green212\blue212;\red0\green0\blue0;
\red5\green25\blue80;}
{\*\expandedcolortbl;;\cssrgb\c5490\c6667\c8627;\cssrgb\c100000\c100000\c100000;\cssrgb\c784\c23137\c58431;
\cssrgb\c62745\c6667\c12157;\cssrgb\c38431\c17255\c73725;\cssrgb\c0\c0\c0;\cssrgb\c5490\c6667\c8627;\cssrgb\c784\c29804\c10196;
\cssrgb\c62745\c6667\c12157;\cssrgb\c784\c23137\c58431;\cssrgb\c38431\c17255\c73725;\cssrgb\c43922\c17255\c0;\cssrgb\c784\c29804\c10196;
\cssrgb\c40000\c43922\c48235;\cssrgb\c43922\c17255\c0;\cssrgb\c67451\c71373\c75294\c20000;\cssrgb\c86275\c86275\c86275;\csgray\c0\c0;
\cssrgb\c1176\c14510\c38824;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat35\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww11240\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs30 \cf0 Day 2 Notes [React Cert 2023]
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\ul State vs. Props\ulnone \
State & props are both JS obj\
Can use both to render\
Props is data like a func param that gets passed down to obj\
State is something that is managed on the obj itself\
Parent to child, child cannot change value of props directly, props can be changed by a parent component\
Components have full control to change state\
Can you inherit more than one set of props from more than one parent? Not really; one parent to many child tree structure\
\
\
Set state param requires updating state obj, not just passing in new value\
Incorrect: this.setState(1)\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Correct: this.setState(\{count\cf4 \strokec4 : this\cf5 \strokec5 .\cf2 \strokec2 state\cf5 \strokec5 .\cf2 \strokec2 count\cf5 \strokec5  +\cf2 \strokec2  \cf4 \strokec4 1\cf2 \strokec2 \})\
Callback functions are anonymous function syntax/lambda\
Incorrect: this.state = \{count: this.state.count + 1\}\
The above is incorrect because you need to use the setState function to change state, cannot just reassign the value\cb1 \
\
React is framework/library\
What is in callback function is returned to onClick event listener & onClick will run it\
Event listener vs. event handler\
\
Event handler is a callback routine that operates asynchronously once an event takes place (https://www.techtarget.com/searchapparchitecture/definition/event-handler)\
\
This means this component, scope related\
\
From class notes Readme: \'93Notice that inside our\'a0onClick\'a0listener we are calling an arrow function that in turn calls our class methods. This is working just fine, but it's a bit redundant. The reason we have written it this way is that it is one strategy to help JavaScript understand what the "this" keyword refers to. If we wrap in an arrow function then the contents of the arrow function are determined whilst still inside the class and thus "this" refers to the class instance. In fact, anytime we use "this" inside our class, "this" refers to an instance of our class. But what happens when we call a function on a button we clicked from the browser DOM? Now "this" is undefined! That is why if we remove the surrounding arrow function and refer to our class method directly we get an error because "this" is undefined and therefore can't call the setState method on undefined.\
\
\pard\pardeftab720\partightenfactor0
\cf2 To remedy this instead of wrapping the onClick call in an arrow function, we can instead tell our class inside a constructor to bind "this" (our class instance) to the class method. Then "this" will always refer to our class instance when we are inside that method no mater where it is called from. While we are at it for better readability and understanding, I'm going to move state inside the constructor function as well since that is where Babel the transpiler is actually putting it. Here is the completed code.\'94\
\pard\pardeftab720\partightenfactor0
\cf2 \
Normally all functionality happens back to back and code is run top to bottom (synchronous code)\
When the code that you are writing takes an action that takes more time (I.e., contacting server, API, DB), function will be asynchronous\
Similar to restaurants, drinking water when thirsty is more synchronous; ordering something & the multitasking to cook it & bring it out is asynchronous\
Web apps are just a service\
Structure can come in synchronously, but data to populate structure requires asynchronous\
setState() is an asynchronous action\
User takes action on user side, then have to contact VirtualDOM in different layer because that is where setState lives\
VirtualDOM actions happen in React\'92s server\
Setting of state is happening asynchronously because it calls the VirtualDOM\
Console logging would be synchronous\
Single threaded? Layers?\
HTTP requests are asynchronous, all other actions are synchronous	\
\
Don\'92t mutate state directly in functional components\
Change the variable, then pass the variable to the function used to set the variable\
useState function is a hook\
\
First thing in array is name of state variable, second thing in array is usually written as \'93set\'94 + name of variable\
\
Hooks hook into React component lifecycle\
useState functionality happens somewhere in node modules, so requires different syntax to bring into the app\
\
\'85: spread operator restructures a complex data type like arr or obj, refers to all the contents within the complex data type\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3     \cf5 \strokec5 function\cf2 \strokec2  \cf6 \cb3 \strokec6 addFruit\cf2 \cb3 \strokec2 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5         let\cf2 \strokec2  randomIndex\cf5 \strokec5  =\cf4 \strokec4  Math\cf5 \strokec5 .\cf6 \cb3 \strokec6 floor\cf2 \cb3 \strokec2 (\cf4 \strokec4 Math\cf5 \strokec5 .\cf6 \cb3 \strokec6 random\cf2 \cb3 \strokec2 ()\cf5 \strokec5  *\cf2 \strokec2  \cf4 \strokec4 3\cf2 \strokec2 );\cb1 \
\cf5 \cb3 \strokec5         let\cf2 \strokec2  updatedState\cf5 \strokec5  =\cf2 \strokec2  [\cf5 \strokec5 ...\cf4 \strokec4 fruit\cf2 \strokec2 , \cf4 \strokec4 randomFruit\cf2 \strokec2 [randomIndex]];\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3         \cf6 \cb3 \strokec6 setFruit\cf2 \cb3 \strokec2 (updatedState);\cb1 \
\cb3     \}\cb1 \
\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf7 Need hooks instead of setting var directly because hooks manage VirtualDOM, so don\'92t want regular synchronous JS func, you want something that hooks asynchronously \cf7 \outl0\strokewidth0 into the VirtualDOM\cf7 \outl0\strokewidth0 \strokec2 \
VirtualDOM rerenders components on front end based on updated data \
Static websites manage data at DB level & require synchronously waiting for the DB operation & response\
Now, some data is managed on the computer you are using\
\
Anything made with create-react-app command + template is owned by FB???\
Have to create it from ground up if want to use React & have full ownership + put your name on the license\
\
\
Create instructions detailing common steps to set up project\
\
\
\ul State Lab\ulnone \
\
Instead of:\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 <\cf9 \cb3 \strokec9 Task\cf2 \cb3 \strokec2 />\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
Write:\
\pard\pardeftab720\partightenfactor0

\f2 \cf10 \cb3 \outl0\strokewidth0 \{\cf8  \cf11 tasks\cf10 .\cf12 map\cf8 ( (\cf13 task\cf8 ) \cf10 =>\cf8  <\cf14 Task\cf8  \cf11 key\cf10 =\{\cf13 task\cf10 .\cf8 id\cf10 \}\cf8  \cf11 task\cf10 =\{\cf13 task\cf10 \}\cf8  /> ) \cf10 \}
\f1 \cf7 \cb1 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf7 \
\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf5 \cb3 \strokec5 \{\cf15 \cb3 \strokec15 /* Task List */\cf5 \cb3 \strokec5 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3               \cf5 \strokec5 \{\cf15 \cb3 \strokec15 /* Old code: <Task/> */\cf5 \cb3 \strokec5 \}\cf2 \cb1 \strokec2 \
\cb3               \cb1 \
\cb3               \cf5 \strokec5 \{\cf15 \cb3 \strokec15 /* New code: For each task in tasks, make a Task component. The id of the task will be the key required by React for the mapping. The individual task will be specified by passing it to the Task component as an attribute called "task\{\}". Thus, this task attribute takes our task state as a prop. Attributes live on components & receive props passed to them. The prop they receive as inputs is the current state of the object corresponding to the attribute the component needs to display. */\cf5 \cb3 \strokec5 \}\cf2 \cb1 \strokec2 \
\
\cb3               \cf5 \strokec5 \{\cf2 \strokec2  \cf4 \strokec4 tasks\cf5 \strokec5 .\cf6 \cb3 \strokec6 map\cf2 \cb3 \strokec2 ( (\cf16 \cb3 \strokec16 task\cf2 \cb3 \strokec2 ) \cf5 \strokec5 =>\cf2 \strokec2  <\cf9 \cb3 \strokec9 Task\cf2 \cb3 \strokec2  \cf4 \strokec4 key\cf5 \strokec5 =\{\cf16 \cb3 \strokec16 task\cf5 \cb3 \strokec5 .\cf2 \strokec2 id\cf5 \strokec5 \}\cf2 \strokec2  \cf4 \strokec4 task\cf5 \strokec5 =\{\cf16 \cb3 \strokec16 task\cf5 \cb3 \strokec5 \}\cf2 \strokec2  /> ) \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
Before props:\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 <\cf9 \cb3 \strokec9 AddTask\cf2 \cb3 \strokec2 />\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
After props:\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 <\cf9 \cb3 \strokec9 AddTask\cf2 \cb3 \strokec2  \cf4 \strokec4 addTask\cf5 \strokec5 =\{\cf2 \strokec2  \cf6 \cb3 \strokec6 addTask\cf2 \cb3 \strokec2  \cf5 \strokec5 \}\cf2 \strokec2  \cf4 \strokec4 lastId\cf5 \strokec5 =\{\cf2 \strokec2  \cf4 \strokec4 tasks\cf5 \strokec5 .\cf4 \strokec4 length\cf2 \strokec2  \cf5 \strokec5 \}\cf2 \strokec2 />\
\

\f1 \
* Memorize built-in JS array functions\
\
\
\pard\pardeftab720\sa196\partightenfactor0

\f3 \cf2 \cb1 \strokec2 In order for the Task component to be able to access this(removeTask(taskId)) method, we will have to pass a reference to it using props.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 Inside the\'a0
\f4 return
\f3 \'a0statement, add a prop on the\'a0
\f4 <Task />
\f3 \'a0element to pass a reference to the\'a0
\f4 removeTask
\f3 \'a0function. This way, removeTask can be called from inside of the Task component. Since the\'a0
\f4 key=\{\}
\f3 \'a0attribute is reserved by React and not an accesible prop on our child component, we will also add a new attribute called\'a0
\f4 id=\{\}
\f3 \'a0so we can pass the unique id as a prop into our Task component:
\f2 \cf2 \cb17 \strokec2  \cf18 \strokec18 Task\cf2 \strokec2  key=\{task.id\} id=\{task.id\} task=\{task\} 
\f1 \cf7 \cb19 removeTask=\{removeTask\} />\
\
Fragments over divs with no attributes because plain divs can still have styling\
\
* map is like shorthand JS for for each loops\
\
All languages have: store data, loops, conditionals
\f3 \cf2 \cb1 \strokec2 \
\ls1\ilvl0
\f2 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \

\f1 \ul Bootstrap Patterns\ulnone \
Container\
Row\
Column (col)
\f2 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\ul Functional Class Patterns\ulnone \
ffc shortcut via React Snippets extension\
File can contain:\
	Imports (React imports, file imports, CSS imports)\
	Helper functions\
	State\
	Functional component definition (function) - required\
	Export default statement\cf7 \outl0\strokewidth0  - required\cf7 \outl0\strokewidth0 \strokec2 \
Inside function: return(HTML - must be nested if more than one div, can be nested in fragment (empty tag))\
\
\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf15 \cb3 \strokec15 // Dynamic class names - making the className equivalent to the importance will change the appearance based on the level of importance of the task\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3         <\cf9 \cb3 \strokec9 li\cf2 \cb3 \strokec2  \cf4 \strokec4 className\cf5 \strokec5 =\{\cf2 \strokec2  \cf16 \cb3 \strokec16 props\cf5 \cb3 \strokec5 .\cf2 \strokec2 task\cf5 \strokec5 .\cf2 \strokec2 importance \cf5 \strokec5 \}\cf2 \strokec2 >\cb1 \
\cb3             \cf5 \strokec5 \{\cf2 \strokec2  \cf16 \cb3 \strokec16 props\cf5 \cb3 \strokec5 .\cf2 \strokec2 task\cf5 \strokec5 .\cf2 \strokec2 description \cf5 \strokec5 \}\cf2 \cb1 \strokec2 \
\cb3             <\cf9 \cb3 \strokec9 button\cf2 \cb3 \strokec2  \cf4 \strokec4 id\cf5 \strokec5 =\{\cf16 \cb3 \strokec16 props\cf5 \cb3 \strokec5 .\cf2 \strokec2 id\cf5 \strokec5 \}\cf2 \strokec2  \cf4 \strokec4 className\cf5 \strokec5 =\cf20 \cb3 \strokec20 "btn btn-danger"\cf2 \cb3 \strokec2  \cf4 \strokec4 onClick\cf5 \strokec5 =\{\cf6 \cb3 \strokec6 handleClick\cf5 \cb3 \strokec5 \}\cf2 \strokec2 >X</\cf9 \cb3 \strokec9 button\cf2 \cb3 \strokec2 >\cb1 \
\cb3         </\cf9 \cb3 \strokec9 li\cf2 \cb3 \strokec2 >\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3     \{\cf15 \cb3 \strokec15 /* We would like to create a class property we will call uniqueId to identify each individual task. You might ask why not just use the length of array and add 1 to it each time we create a new task. This poses some issues in that our array length will always be changed as we add and also remove tasks. To solve this, we will have a dedicated number called uniqueId that will always continue forward by 1 each time a new task is created regardless if the array changes. This is why we are passing in the length of the initial state tasks, so that the uniqueId continues from there. This is a common strategy used for id numbers in databases as well. */\cf2 \cb3 \strokec2 \}\cb1 \
\cb3     \{\cf15 \cb3 \strokec15 /* Note that inside of useState() we are adding 1 to the initial value. This is to avoid a bug that has to do with setState() being asynchronous and the creation of a new task object being synchronous. */\cf2 \cb3 \strokec2 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
Query: http://localhost:3000/?description=To+do&importance=medium\
Data that can be passed to a (form? Or any page?) via a URL\
\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf5 \cb3 \strokec5         let\cf2 \strokec2  newTask\cf5 \strokec5  =\cf2 \strokec2  \{\cb1 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 id\cf4 \strokec4 :\cf2 \strokec2  \cf4 \strokec4 uniqueId\cf2 \strokec2 ,\cb1 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 description\cf4 \strokec4 :\cf2 \strokec2  \cf16 \cb3 \strokec16 e\cf5 \cb3 \strokec5 .\cf2 \strokec2 target\cf5 \strokec5 .\cf2 \strokec2 description\cf5 \strokec5 .\cf2 \strokec2 value,\cb1 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 importance\cf4 \strokec4 :\cf2 \strokec2  \cf16 \cb3 \strokec16 e\cf5 \cb3 \strokec5 .\cf2 \strokec2 target\cf5 \strokec5 .\cf2 \strokec2 importance\cf5 \strokec5 .\cf2 \strokec2 value\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3         \}\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
\
\
findIndex returns -1 if it cannot find the desired element\
\
AddTask is a Component because it requires input.\
RemoveTask is a function on the App (or should it be a Component with the X button + functionality that is referenced in Task - no because the data is managed in the App.js, so you need the removeTask function & addTask function to manipulate the state data in the App.js file. AddTask UI component requires user input, so it needs a component + functionality, but the AddTask component passes the new user data to the App.js  & App.js will use its addTask function to add this new data to its state data. Could componentize X button as RemoveTask component, but will still need to keep removeTask function that manipulates App\'92s data in App.js.\
\
\
\
\ul Hooks\ulnone \
\pard\pardeftab720\sa196\partightenfactor0

\f3\fs28 \cf2 \strokec2 Hooks are functions that let you "hook into" React state and lifecycle features from functional components. Hooks don't work inside classes - they let you use React without classes.\
Here are the 3 major rules for using hooks:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hooks can only be called inside React function components.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hooks can only be called at the top level of a component.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hooks cannot be conditional\
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf7 \strokec2 \
BEFORE\
\pard\pardeftab720\partightenfactor0

\f2 \cf5 \cb3 \strokec5 const\cf2 \strokec2  [\cf4 \strokec4 brand\cf2 \strokec2 , \cf6 \cb3 \strokec6 setBrand\cf2 \cb3 \strokec2 ]\cf5 \strokec5  =\cf2 \strokec2  \cf6 \cb3 \strokec6 useState\cf2 \cb3 \strokec2 (\cf20 \cb3 \strokec20 "Ford"\cf2 \cb3 \strokec2 );\cb1 \
\cf5 \cb3 \strokec5     const\cf2 \strokec2  [\cf4 \strokec4 model\cf2 \strokec2 , \cf6 \cb3 \strokec6 setModel\cf2 \cb3 \strokec2 ]\cf5 \strokec5  =\cf2 \strokec2  \cf6 \cb3 \strokec6 useState\cf2 \cb3 \strokec2 (\cf20 \cb3 \strokec20 "Mustang"\cf2 \cb3 \strokec2 );\cb1 \
\cf5 \cb3 \strokec5     const\cf2 \strokec2  [\cf4 \strokec4 year\cf2 \strokec2 , \cf6 \cb3 \strokec6 setYear\cf2 \cb3 \strokec2 ]\cf5 \strokec5  =\cf2 \strokec2  \cf6 \cb3 \strokec6 useState\cf2 \cb3 \strokec2 (\cf20 \cb3 \strokec20 "1964"\cf2 \cb3 \strokec2 );\cb1 \
\cf5 \cb3 \strokec5     const\cf2 \strokec2  [\cf4 \strokec4 color\cf2 \strokec2 , \cf6 \cb3 \strokec6 setColor\cf2 \cb3 \strokec2 ]\cf5 \strokec5  =\cf2 \strokec2  \cf6 \cb3 \strokec6 useState\cf2 \cb3 \strokec2 (\cf20 \cb3 \strokec20 "black"\cf2 \cb3 \strokec2 );\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 <\cf9 \cb3 \strokec9 div\cf2 \cb3 \strokec2 >\cb1 \
\cb3             <\cf9 \cb3 \strokec9 h1\cf2 \cb3 \strokec2 >My \cf5 \strokec5 \{\cf4 \strokec4 brand\cf5 \strokec5 \}\cf2 \strokec2 </\cf9 \cb3 \strokec9 h1\cf2 \cb3 \strokec2 >\cb1 \
\cb3             <\cf9 \cb3 \strokec9 p\cf2 \cb3 \strokec2 >is a \cf5 \strokec5 \{\cf4 \strokec4 color\cf5 \strokec5 \}\cf2 \strokec2  \cf5 \strokec5 \{\cf4 \strokec4 model\cf5 \strokec5 \}\cf2 \strokec2  from \cf5 \strokec5 \{\cf4 \strokec4 year\cf5 \strokec5 \}\cf2 \strokec2 .</\cf9 \cb3 \strokec9 p\cf2 \cb3 \strokec2 >\cb1 \
\cb3         </\cf9 \cb3 \strokec9 div\cf2 \cb3 \strokec2 > \cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
AFTER\
\pard\pardeftab720\partightenfactor0

\f2 \cf5 \cb3 \strokec5  const\cf2 \strokec2  [\cf4 \strokec4 car\cf2 \strokec2 , \cf6 \cb3 \strokec6 setCar\cf2 \cb3 \strokec2 ]\cf5 \strokec5  =\cf2 \strokec2  \cf6 \cb3 \strokec6 useState\cf2 \cb3 \strokec2 (\{\cb1 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 brand\cf4 \strokec4 :\cf2 \strokec2  \cf20 \cb3 \strokec20 "Ford"\cf2 \cb3 \strokec2 ,\cb1 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 model\cf4 \strokec4 :\cf2 \strokec2  \cf20 \cb3 \strokec20 "Mustang"\cf2 \cb3 \strokec2 ,\cb1 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 year\cf4 \strokec4 :\cf2 \strokec2  \cf20 \cb3 \strokec20 "1964"\cf2 \cb3 \strokec2 ,\cb1 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 color\cf4 \strokec4 :\cf2 \strokec2  \cf20 \cb3 \strokec20 "black"\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3     \});\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 <\cf9 \cb3 \strokec9 div\cf2 \cb3 \strokec2 >\cb1 \
\cb3             <\cf9 \cb3 \strokec9 h1\cf2 \cb3 \strokec2 >My \cf5 \strokec5 \{\cf4 \strokec4 car\cf5 \strokec5 .\cf2 \strokec2 brand\cf5 \strokec5 \}\cf2 \strokec2 </\cf9 \cb3 \strokec9 h1\cf2 \cb3 \strokec2 >\cb1 \
\cb3             <\cf9 \cb3 \strokec9 p\cf2 \cb3 \strokec2 >is a \cf5 \strokec5 \{\cf4 \strokec4 car\cf5 \strokec5 .\cf2 \strokec2 color\cf5 \strokec5 \}\cf2 \strokec2  \cf5 \strokec5 \{\cf4 \strokec4 car\cf5 \strokec5 .\cf2 \strokec2 model\cf5 \strokec5 \}\cf2 \strokec2  from \cf5 \strokec5 \{\cf4 \strokec4 car\cf5 \strokec5 .\cf2 \strokec2 year\cf5 \strokec5 \}\cf2 \strokec2 .</\cf9 \cb3 \strokec9 p\cf2 \cb3 \strokec2 >\cb1 \
\cb3         </\cf9 \cb3 \strokec9 div\cf2 \cb3 \strokec2 >  \cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
NOTE\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf6 \cb3 \strokec6 setCar\cf2 \cb3 \strokec2 (\{\cb1 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 color\cf4 \strokec4 :\cf20 \cb3 \strokec20 "purple"\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3         \});\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf7 \
\
Is wrong, it will clear the rest of the data from the object, need to pass previous state\
Previous state is a standard naming convention, not a keyword\
\
setState pattern: setState(data) OR setState((previousState) => \{\'85previousState\})\
\
Immerse: import useState & useEffect snippet shortcut\
\
\
useEffects always takes in two arguments: first, a callback function that defines what is going to run if changes happen to the array, and the second argument is the array to watch for changes\
Renders every time state changes\
Anything with useEffect doesn\'92t need user input, it just runs\
If you don\'92t pass any dependencies in the array to watch (no comma after first arg) = renders every time any var is changes (?)\
[] = runs the first time the component loads\
[var] = run every time the specified var changes\
\
Often used for visual side effects, feedback to user\
\
\
\
\
useState runs when data for state is changes\
useEffect runs after action/change\
useRef runs\
\
\
useRef is less common than the other two\
Persisting data in between rendering in the cloud\
React also gives you the option of useRef\
\
UseRef doesn\'92t update the components, but useState does right away\
useRef is good for if you don\'92t need to display the changed data to the user\
\
As we switch components on click, a useEffect runs to do stuff like contact DB\
\
\
G\
F}