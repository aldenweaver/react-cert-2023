{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red141\green0\blue24;\red255\green255\blue255;\red13\green14\blue17;
\red5\green40\blue131;\red78\green16\blue174;\red5\green25\blue80;\red0\green0\blue0;\red141\green0\blue24;
\red26\green25\blue36;\red83\green93\blue104;\red9\green61\blue20;\red92\green32\blue1;\red78\green16\blue174;
\red13\green14\blue17;\red5\green40\blue131;}
{\*\expandedcolortbl;;\cssrgb\c62745\c6667\c12157;\cssrgb\c100000\c100000\c100000;\cssrgb\c5490\c6667\c8627;
\cssrgb\c784\c23137\c58431;\cssrgb\c38431\c17255\c73725;\cssrgb\c1176\c14510\c38824;\cssrgb\c0\c0\c0;\cssrgb\c62745\c6667\c12157;
\cssrgb\c13333\c13333\c18824;\cssrgb\c40000\c43922\c48235;\cssrgb\c784\c29804\c10196;\cssrgb\c43922\c17255\c0;\cssrgb\c38431\c17255\c73725;
\cssrgb\c5490\c6667\c8627;\cssrgb\c784\c23137\c58431;}
\margl1440\margr1440\vieww10260\viewh15320\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs30 \cf0 Day 9 Notes [React Cert 2023]\

\f1\b0 \ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulc0 Local Storage\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Local storage does not require installation\
First arg is key, second is value\
Similar to use states, expect local storage persists in the browser over time\
useState & setState are asynchronous, so when we do setCounter, it is not complete.\
\
Count in local storage will be one behind state var counter\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 const\cf4 \cb3 \strokec4  [\cf5 \cb3 \strokec5 counter\cf4 \cb3 \strokec4 , \cf6 \cb3 \strokec6 setCounter\cf4 \cb3 \strokec4 ]\cf2 \cb3 \strokec2  =\cf4 \cb3 \strokec4  \cf6 \cb3 \strokec6 useState\cf4 \cb3 \strokec4 (\cf5 \cb3 \strokec5 0\cf4 \cb3 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \cb3 \strokec2 function\cf4 \cb3 \strokec4  \cf6 \cb3 \strokec6 plusOne\cf4 \cb3 \strokec4 () \{\cb1 \
\cb3     \cf6 \cb3 \strokec6 setCounter\cf4 \cb3 \strokec4 (\cf5 \cb3 \strokec5 counter\cf2 \strokec2  +\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 1\cf4 \cb3 \strokec4 );\cb1 \
\cb3     \cf5 \cb3 \strokec5 localStorage\cf2 \strokec2 .\cf6 \cb3 \strokec6 setItem\cf4 \cb3 \strokec4 (\cf7 \cb3 \strokec7 "count"\cf4 \cb3 \strokec4 , \cf5 \cb3 \strokec5 counter\cf4 \cb3 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\cb3   \cf2 \cb3 \strokec2 function\cf4 \cb3 \strokec4  \cf6 \cb3 \strokec6 minusOne\cf4 \cb3 \strokec4 () \{\cb1 \
\cb3     \cf6 \cb3 \strokec6 setCounter\cf4 \cb3 \strokec4 (\cf5 \cb3 \strokec5 counter\cf2 \strokec2  -\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 1\cf4 \cb3 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\
\
If you refresh, the local storage will still be there so the count will still be whatever it was last\
Data in local storage persists in browser\
\
To retrieve in HTML: \cf2 \cb3 \strokec2 \{\cf5 \strokec5 localStorage\cf2 \strokec2 .\cf6 \cb3 \strokec6 getItem\cf4 \cb3 \strokec4 (\cf7 \cb3 \strokec7 "count"\cf4 \cb3 \strokec4 )\cf2 \cb3 \strokec2 \}\cf8 \
\
setItem(key) to set, getItem(key) to get\
\
localStorage persists past browser close & 24hrs, it clears/expires when cache is cleared, by deleting it manually, localStorage.removeItem(key)\
\
Use cases: logins, used to hold data across time, cookies are storage in browser & can be read by server, allow back-end server to double check that you are logged in, to allow front end control/reading, use JWT token or local storage?\
Useful for e-commerce, shopping carts\
User demographics, likes, sizes, etc\
\
\
\
material-ui: https://mui.com/\
	\cf8 \cb3 \outl0\strokewidth0 Also has icons\cf8 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf10 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 react-icons: https://react-icons.github.io/react-icons\cf8 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf8 \
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4  \cf2 \cb3 \strokec2 \{\cf11 \cb3 \strokec11 /* Not running the function, passing definition to form, so don't need parens/params */\cf2 \cb3 \strokec2 \}\cf4 \cb1 \strokec4 \
\cb3       <\cf12 \cb3 \strokec12 NewTodoForm\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 addTodo\cf2 \strokec2 =\{\cf6 \strokec6 addTodo\cf2 \strokec2 \}\cf4 \cb3 \strokec4 />\
\
instead of props, deconstruct it\
\cf2 \cb3 \strokec2 function\cf4 \cb3 \strokec4  \cf6 \cb3 \strokec6 NewTodoForm\cf4 \cb3 \strokec4 (\{ \cf13 \cb3 \strokec13 addTodo\cf4 \cb3 \strokec4  \})\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec2 Data living on app level requires deleting/handling on App level, can use index to help specify\
\
\
\
key is not accessible to us as a prop, it is used by React, so still have to pass index to use it\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 <\cf12 \cb3 \strokec12 Todo\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 key\cf2 \strokec2 =\{\cf13 \cb3 \strokec13 index\cf2 \cb3 \strokec2 \}\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 todo\cf2 \strokec2 =\{\cf13 \cb3 \strokec13 todo\cf2 \cb3 \strokec2 \}\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 index\cf2 \strokec2 =\{\cf13 \cb3 \strokec13 index\cf2 \cb3 \strokec2 \}\cf4 \cb3 \strokec4  \cf5 \cb3 \strokec5 markComplete\cf2 \strokec2 =\{\cf6 \strokec6 markComplete\cf2 \strokec2 \}\cf4 \cb3 \strokec4 ></\cf12 \cb3 \strokec12 Todo\cf4 \cb3 \strokec4 >\
\
Infinite loop:\
\cf5 \cb3 \strokec5 onClick\cf2 \strokec2 =\{\cf6 \strokec6 markComplete\cf4 \cb3 \strokec4 (\cf13 \cb3 \strokec13 index\cf4 \cb3 \strokec4 )\cf2 \cb3 \strokec2 \} \cf4 \cb1 \strokec4 \
\cb3 \
Solution: callback function\
\cf5 \cb3 \strokec5 onClick\cf2 \strokec2 =\{\cf4 \cb3 \strokec4 () \cf2 \cb3 \strokec2 =>\cf4 \cb3 \strokec4  \cf6 \cb3 \strokec6 markComplete\cf4 \cb3 \strokec4 (\cf13 \cb3 \strokec13 index\cf4 \cb3 \strokec4 )\cf2 \cb3 \strokec2 \}\
\
\
\pard\pardeftab720\partightenfactor0
\cf11 \cb3 \strokec11 // Modifying one member of the array, so need to update array via useState/set\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 setTodos\cf4 \cb3 \strokec4 ([\cf2 \cb3 \strokec2 ...\cf5 \strokec5 todos\cf4 \cb3 \strokec4 ]);\
\pard\pardeftab720\partightenfactor0
\cf14 \cb3 \outl0\strokewidth0 \
\cf11 // Doesn\'92t work\cf14 \
setTodos\cf15 (\cf16 todos\cf15 );\cf4 \cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\
\
dynamically save what is in the state to persist dynamic data (?)\
Local storage allows you to save data after refresh\
Use ternary operator to see if there is anything there\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec2 \
\
\ul Todo List Extra Features\ulnone \
Move completed to Archive\
Calendar archive view\
Notes on calendar, notes on todo\
Individual todo popup view, more complex todo data\
DB eventually\
\
\
\
custom hook = functionality anywhere\
context = data anywhere\
\pard\pardeftab720\partightenfactor0
\cf8 \cb1 \strokec4 \
}