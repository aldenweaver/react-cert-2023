{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Monaco;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red13\green14\blue17;\red83\green93\blue104;\red255\green255\blue255;
\red5\green40\blue131;\red5\green25\blue80;\red141\green0\blue24;\red78\green16\blue174;\red92\green32\blue1;
\red9\green61\blue20;\red13\green14\blue17;\red22\green21\blue22;\red22\green21\blue22;}
{\*\expandedcolortbl;;\cssrgb\c5490\c6667\c8627;\cssrgb\c40000\c43922\c48235;\cssrgb\c100000\c100000\c100000;
\cssrgb\c784\c23137\c58431;\cssrgb\c1176\c14510\c38824;\cssrgb\c62745\c6667\c12157;\cssrgb\c38431\c17255\c73725;\cssrgb\c43922\c17255\c0;
\cssrgb\c784\c29804\c10196;\cssrgb\c5490\c6667\c8627;\cssrgb\c11373\c10980\c11373;\cssrgb\c11373\c10980\c11373\c3922;}
\margl1440\margr1440\vieww10060\viewh18500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs30 \cf0 Day 4 Notes [React Cert 2023]
\f1\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Custom Hooks\ulnone \
From readme: \
\'93
\f2\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hooks are reusable functions.\
\pard\pardeftab720\sa196\partightenfactor0
\cf2 When you have component logic that needs to be used by multiple components, we can extract that logic into a custom Hook.\
Custom Hooks should start with "use", for example\'a0
\f3 useFetch
\f1\fs30 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \'94\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 useAxios\
We will be building this out & showing examples of fetch/axios calls & different ways to handle that in React\
Why a custom hook ends up being a good fit for making fetch/axios/api data calls\
JSON placeholder for practicing with mock data: https://jsonplaceholder.typicode.com/\
\
\
\pard\pardeftab720\partightenfactor0

\f4 \cf3 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3  // useState requires a parameter of an initial state value\cf2 \cb1 \strokec2 \
\
\
.then(function) can be attached to fetch\
Handles asynchronous functions\
These are the actions that should take place when the data comes back from the function it is called on\
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 fetch\cf2 \strokec2 (\cf6 \strokec6 "https://jsonplaceholder.typicode.com/todos"\cf2 \strokec2 )\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2       \cf7 \strokec7 .\cf8 \strokec8 then\cf2 \strokec2 ((\cf9 \strokec9 res\cf2 \strokec2 ) \cf7 \strokec7 =>\cf2 \strokec2  \cf9 \strokec9 res\cf7 \strokec7 .\cf8 \strokec8 json\cf2 \strokec2 ())\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2       \cf7 \strokec7 .\cf8 \strokec8 then\cf2 \strokec2 ((\cf9 \strokec9 data\cf2 \strokec2 ) \cf7 \strokec7 =>\cf2 \strokec2  \cf8 \strokec8 setData\cf2 \strokec2 (\cf9 \strokec9 data\cf2 \strokec2 ));\cf2 \cb1 \strokec2 \
\
\
\
Empty array means useEffect runs only one times whenever the component is loaded up\
\cf2 \cb4 \strokec2   \cf8 \strokec8 useEffect\cf2 \strokec2 (() \cf7 \strokec7 =>\cf2 \strokec2  \{\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf5 \strokec5 fetch\cf2 \strokec2 (\cf6 \strokec6 "https://jsonplaceholder.typicode.com/todos"\cf2 \strokec2 )\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2       \cf7 \strokec7 .\cf8 \strokec8 then\cf2 \strokec2 ((\cf9 \strokec9 res\cf2 \strokec2 ) \cf7 \strokec7 =>\cf2 \strokec2  \cf9 \strokec9 res\cf7 \strokec7 .\cf8 \strokec8 json\cf2 \strokec2 ())\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2       \cf7 \strokec7 .\cf8 \strokec8 then\cf2 \strokec2 ((\cf9 \strokec9 data\cf2 \strokec2 ) \cf7 \strokec7 =>\cf2 \strokec2  \cf8 \strokec8 setData\cf2 \strokec2 (\cf9 \strokec9 data\cf2 \strokec2 ));\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2   \}, []);\cf2 \cb1 \strokec2 \
\
\
Conditional:\
\{\cf5 \cb4 \strokec5 data\cf7 \strokec7  &&\cf2 \strokec2  \cf5 \strokec5 data\cf7 \strokec7 .\cf8 \strokec8 map\cf2 \cb1 \strokec2 ()\}\
If the data does not exist (is null), then the data.map() after the && resolves false & will not run\
Once data is set, component refreshes and since data will now evaluate to true, the map after the && will run\
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7 \{\cf5 \strokec5 data\cf7 \strokec7  &&\cf2 \strokec2  \cf5 \strokec5 data\cf7 \strokec7 .\cf8 \strokec8 map\cf2 \strokec2 ((\cf9 \strokec9 item\cf2 \strokec2 ) \cf7 \strokec7 =>\cf2 \strokec2  \{\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7         return\cf2 \strokec2  <\cf10 \cb4 \strokec10 p\cf2 \cb4 \strokec2  \cf5 \strokec5 key\cf7 \strokec7 =\{\cf9 \strokec9 item\cf7 \strokec7 .\cf2 \strokec2 id\cf7 \strokec7 \}\cf2 \strokec2 >\cf7 \strokec7 \{\cf9 \strokec9 item\cf7 \strokec7 .\cf2 \strokec2 title\cf7 \strokec7 \}\cf2 \strokec2 </\cf10 \cb4 \strokec10 p\cf2 \cb4 \strokec2 >\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2       \})\cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
From readme: \'93
\f2\fs28 \cf2 \strokec2 The "data &&" before the map is a conditional statement that checks if the data variable is truthy. If it is truthy, the code inside the curly braces will be executed. This is done to prevent the map function from running on a null or undefined data variable, which would cause an error. It is a way of checking if the data has been successfully fetched before trying to map over it.
\f4\fs30 \cf2 \strokec2 \'94\
\
Technically, the component loads twice every time it loads because when the code first runs, data is null, so map will not run. Then useEffect is run on component load, returns data. Since returned data is then set to state, the state changing will cause the component to reload/rerender.\
\
\
Now that we have practiced with JSON placeholder data, can refactor into custom hook so can fetch any data.\
\
Instead of being like a component that returns HTML elms, a custom hook returns state variables so that we can have control over them in whatever scope we want\
Exporting functionality\
This way, you don\'92t have to keep track of passing around state to components\
\
\
This code goes from App.js to useFetch.js custom hook:\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 // Contain the data that will come back from an API call (in this case, JSON placeholder)\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3   // useState requires a parameter of an initial state value\cf2 \cb1 \strokec2 \
\cf7 \cb4 \strokec7   const\cf2 \strokec2 [\cf5 \strokec5 data\cf2 \strokec2 , \cf8 \strokec8 setData\cf2 \strokec2 ]\cf7 \strokec7  =\cf2 \strokec2  \cf8 \strokec8 useState\cf2 \strokec2 (\cf5 \strokec5 null\cf2 \strokec2 );\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
useEffect containing fetch also goes in custom hook, now replace hard-coded URL with variable url.\
\
A reusable set of functionality should be stored in a custom hook\
E.g., useLogin custom hook\
\
Components return HTML, custom hooks return variables\
\
Can reuse custom hooks on multiple components\
\
\
Make a component that uses useFetch to get data from public API of choosing & display returned data\
API: \cf11 \outl0\strokewidth0 https://animechan.vercel.app/\cf2 \outl0\strokewidth0 \strokec2 \
npx create-react-app anime-quoter\
https://animechan.vercel.app/\
@mui nom: npm install @mui/material @emotion/react @emotion/styled\
\
if localhost port says its busy: 
\f3\fs24 \cf12 \cb13 \strokec12 npx kill-port 3000\

\f4\fs30 \cf2 \cb1 \strokec2 \
\
conditional rendering\
\
\
have function on useFetch side, then pass into custom compoent\
\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb4 \strokec6 Display multiple quotes\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6 \{data && data\cf5 \strokec5 .\cf6 \strokec6 map((\cf9 \strokec9 quote\cf6 \strokec6 ) => \{\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6     return (\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6         <>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6             \{data \cf7 \strokec7 ?\cf6 \strokec6  \cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6                 <li key=\{\cf9 \strokec9 quote\cf5 \strokec5 .\cf6 \strokec6 id\}>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6                     <h3>\{\cf9 \strokec9 quote\cf5 \strokec5 .\cf6 \strokec6 character\}:</h3>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6                     <p>"\{\cf9 \strokec9 quote\cf5 \strokec5 .\cf6 \strokec6 quote\}"</p>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6                     <h4>\{\cf9 \strokec9 quote\cf5 \strokec5 .\cf6 \strokec6 anime\}:</h4>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6                 </li>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6             : "Loading data from API\cf5 \strokec5 ...\cf6 \strokec6 "\}\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6         </>\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6     );\cf2 \cb1 \strokec2 \
\cf6 \cb4 \strokec6 \})\}\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\
Note: map will not work on a single item!\
\
\
}