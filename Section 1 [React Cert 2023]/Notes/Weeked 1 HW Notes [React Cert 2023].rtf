{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red141\green0\blue24;\red255\green255\blue255;\red13\green14\blue17;
\red5\green25\blue80;\red83\green93\blue104;\red5\green40\blue131;\red78\green16\blue174;\red92\green32\blue1;
\red49\green55\blue68;\red135\green143\blue164;\red26\green29\blue35;\red17\green106\blue147;\red241\green250\blue247;
}
{\*\expandedcolortbl;;\cssrgb\c62745\c6667\c12157;\cssrgb\c100000\c100000\c100000;\cssrgb\c5490\c6667\c8627;
\cssrgb\c1176\c14510\c38824;\cssrgb\c40000\c43922\c48235;\cssrgb\c784\c23137\c58431;\cssrgb\c38431\c17255\c73725;\cssrgb\c43922\c17255\c0;
\cssrgb\c25098\c27843\c33725;\cssrgb\c60000\c63137\c70196\c10196;\cssrgb\c13725\c15294\c18431;\cssrgb\c3137\c49412\c64314;\cssrgb\c95686\c98431\c97647;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww7140\viewh15260\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs30 \cf0 Weekend 1 HW Notes [React Cert 2023]
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\f0\b \ul weather-app
\f1\b0 \ulnone \
\
\ul CSS\ulnone \
https://mui.com/core/\
Currently: npm install @mui/material @emotion/react @emotion/styled\
In index.js: \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
import\cf4  \cf5 'bootstrap/dist/css/bootstrap.css'\cf4 ;\cb1 \
\cf2 \cb3 import\cf4  \cf5 '@mui/material'\cf4 ;\cb1 \
\cf2 \cb3 import\cf4  \cf5 './index.css'\cf4 ;\
\
\
\ul Fix how we get date from data\ulnone \
Currently each item in data.list[] is at a date time that is 3 hours apart.\
We want each day but at the current time.\
24/3 = 8\
So use mod(%) 8\
list[0] is today. list[8] is next day at current time.\
\
// Retrieve every eighth data item\
// If the index is divisible by 8, & the list indices start at 0, every eighth index number will have a remainder of 0 when divided by 8.\
if(i % 8 = 0) \{\
	//pseudocode\
	retrieve list[i];\
\}\
\
better way:\
increment i by 8 in for loop & start at 0. Go for how many days are desired (make this a variable in the future; right now, it will be hard-coded for 4; also API may return a limited amount of data anyway)\
8 is an API-specific number because the API returns 8 sets of data per day.\
i < 8*number of days \
i <= 8*4\
32\
\
Code\
\
\pard\pardeftab720\partightenfactor0
\cf6             // Start at 8 because there are 8 data points per day & today is already being displayed.\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3             \cf2 for\cf4 (\cf2 let\cf4  i\cf2 =\cf7 8\cf4 ; i\cf2 <=\cf7 apiDataInterval\cf2 *\cf7 numWeatherBoxes\cf4 ; i\cf2  +=\cf4  \cf7 apiDataInterval\cf4 ) \{\cb1 \
\cb3                 weekArray\cf7 .\cf8 push\cf4 (\{\cb1 \
\cf7 \cb3                     \cf4 dayData\cf7 :\cf4  \{\cb1 \
\cf7 \cb3                         \cf4 weekDay\cf7 :\cf4  \cf8 getDay\cf4 (\cf7 data\cf2 .\cf4 list[i]\cf2 .\cf4 dt_txt),\cb1 \
\cf7 \cb3                         \cf4 temp\cf7 :\cf4  \cf7 data\cf2 .\cf4 list[i]\cf2 .\cf4 main\cf2 .\cf4 temp,\cb1 \
\cf7 \cb3                         \cf4 desc\cf7 :\cf4  \cf7 data\cf2 .\cf4 list[i]\cf2 .\cf4 weather[\cf7 0\cf4 ]\cf2 .\cf4 description,\cb1 \
\cf7 \cb3                         \cf4 img\cf7 :\cf4  \cf7 data\cf2 .\cf4 list[i]\cf2 .\cf4 weather[\cf7 0\cf4 ]\cf2 .\cf4 icon\cb1 \
\cb3                     \}\cb1 \
\cb3                 \});\cb1 \
\cb3                 // \cf7 console\cf2 .\cf8 log\cf4 (\cf5 "Week Array: "\cf2  +\cf4  \cf7 JSON\cf2 .\cf8 stringify\cf4 (weekArray));\cb1 \
\cb3             \}\cb1 \
\cb3 \
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 Implement getDay(date)\cf4 \ulnone \
Old\
    \cf2 function\cf4  \cf8 getDay\cf4 (\cf9 date\cf4 )\{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3         let\cf4  weekday\cf2  =\cf4  [\cf5 "Sunday"\cf4 , \cf5 "Monday"\cf4 , \cf5 "Tuesday"\cf4 , \cf5 "Wednesday"\cf4 , \cf5 "Thursday"\cf4 , \cf5 "Friday"\cf4 , \cf5 "Saturday"\cf4 ];\cb1 \
\
\cf2 \cb3         return\cf4  weekday[\cf7 0\cf4 ];\cb1 \
\cb3     \}\cb1 \
\cb3 \
\
New\
\pard\pardeftab720\partightenfactor0
\cf6     // Helper function to format day of the week\cf4 \cb1 \
\cf6 \cb3     // Leverage JS Date.getDay()\cf4 \cb1 \
\cf6 \cb3     // Since getDay only works on Date type objects,\cf4 \cb1 \
\cf6 \cb3     // make the date input into a Date object,\cf4 \cb1 \
\cf6 \cb3     // then call getDay() on it.\cf4 \cb1 \
\cf6 \cb3     // Sunday - Saturday : 0 - 6\cf4 \cb1 \
\cf6 \cb3     // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 function\cf4  \cf8 getDay\cf4 (\cf9 date\cf4 )\{\cb1 \
\cf2 \cb3         let\cf4  weekday\cf2  =\cf4  [\cf5 "Sunday"\cf4 , \cf5 "Monday"\cf4 , \cf5 "Tuesday"\cf4 , \cf5 "Wednesday"\cf4 , \cf5 "Thursday"\cf4 , \cf5 "Friday"\cf4 , \cf5 "Saturday"\cf4 ];\cb1 \
\
\cf2 \cb3         return\cf4  weekday[\cf2 new\cf4  \cf7 Date\cf4 (\cf9 date\cf4 )\cf2 .\cf8 getDay\cf4 ()];\cb1 \
\cb3     \} \cb1 \
\cb3 \
\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 useEffect\cf4 \ulnone \
From react.dev:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf10 \cb11 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
useEffect\cf12 \cb3  is a Hook, so you can only call it 
\f0\b at the top level of your component
\f1\b0  or your own Hooks. You can\'92t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf12 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If you\'92re 
\f0\b not trying to synchronize with some external system,
\f1\b0  {\field{\*\fldinst{HYPERLINK "https://react.dev/learn/you-might-not-need-an-effect"}}{\fldrslt \cf13 you probably don\'92t need an Effect.}}\cf13 \'94 \
\pard\tx720\pardeftab720\sa240\partightenfactor0
\cf12 \cb1 \'93\cb14 An Effect lets you {\field{\*\fldinst{HYPERLINK "https://react.dev/learn/synchronizing-with-effects"}}{\fldrslt \cf13 keep your component synchronized}} with some external system (like a chat service). Here, 
\f2\i external system
\f1\i0  means any piece of code that\'92s not controlled by React\'94\
\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \
\
\
\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 Next Steps\ulnone \
Master map & spread (\'85)\
\
Destructuring: \
const \{today, thisWeek\} = props;\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 // Syntactic sugar to store props in local variables\cf4 \cb1 \
\cf6 \cb3     // Without this, would have to prefix them with props.today (<h1>\{props.today.title\}</h1>)\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3     const\cf4  \{\cf7 title\cf4 , \cf7 styles\cf4 , \cf7 temp\cf4 , \cf7 desc\cf4 , \cf7 img\cf4 \}\cf2  =\cf4  \cf9 props\cf2 .\cf4 today;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \
\
}