{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red141\green0\blue24;\red13\green14\blue17;
\red5\green25\blue80;\red5\green40\blue131;\red78\green16\blue174;\red9\green61\blue20;\red70\green137\blue204;
\red212\green212\blue212;\red203\green139\blue114;\red13\green14\blue17;\red5\green25\blue80;\red137\green137\blue137;
\red140\green211\blue254;\red255\green255\blue255;\red0\green0\blue0;\red83\green93\blue104;\red26\green25\blue36;
\red92\green32\blue1;\red17\green106\blue147;\red26\green29\blue35;}
{\*\expandedcolortbl;;\csgray\c0\c0;\cssrgb\c62745\c6667\c12157;\cssrgb\c5490\c6667\c8627;
\cssrgb\c1176\c14510\c38824;\cssrgb\c784\c23137\c58431;\cssrgb\c38431\c17255\c73725;\cssrgb\c784\c29804\c10196;\cssrgb\c33725\c61176\c83922;
\cssrgb\c86275\c86275\c86275;\cssrgb\c83922\c61569\c52157;\cssrgb\c5490\c6667\c8627;\cssrgb\c1176\c14510\c38824;\cssrgb\c60784\c60784\c60784;
\cssrgb\c61176\c86275\c99608;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;\cssrgb\c40000\c43922\c48235;\cssrgb\c13333\c13333\c18824;
\cssrgb\c43922\c17255\c0;\cssrgb\c3137\c49412\c64314;\cssrgb\c13725\c15294\c18431;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2\'01\'01;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11640\viewh15400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs30 \cf0 \cb2 Day 7 Notes [React Cert 2023]
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\ul React Router\ulnone \
react-router requires installing react-router-dom\
npm i react-router-dom\
React Native (mobile dev) requires react-router-native instead\
\
Need to wrap app in <BrowserRouter> tag\
\
index.js:\
\pard\pardeftab720\partightenfactor0
\cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 import\cf4 \strokec4  \{BrowserRouter\}\cf3 \strokec3  from\cf4 \strokec4  \cf5 \strokec5 'react-router-dom'\cf4 \strokec4 ;\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 const\cf6 \strokec6  root\cf3 \strokec3  =\cf4 \strokec4  ReactDOM\cf3 \strokec3 .\cf7 \strokec7 createRoot\cf4 \strokec4 (\cf6 \strokec6 document\cf3 \strokec3 .\cf7 \strokec7 getElementById\cf4 \strokec4 (\cf5 \strokec5 'root'\cf4 \strokec4 ));\
\cf6 \strokec6 root\cf3 \strokec3 .\cf7 \strokec7 render\cf4 \strokec4 (\
  <\cf8 \strokec8 React.StrictMode\cf4 \strokec4 >\
    <\cf8 \strokec8 BrowserRouter\cf4 \strokec4 >\
      <\cf8 \strokec8 App\cf4 \strokec4  />\
    </\cf8 \strokec8 BrowserRouter\cf4 \strokec4 >\
  </\cf8 \strokec8 React.StrictMode\cf4 \strokec4 >\
);\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
index.html has div tag with id of root to load React root component\
\
From class README:\
\pard\pardeftab720\partightenfactor0
\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \'93Once you have this library there are three things you need to do in order to use React Router.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Setup your router\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Define your routes\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Handle navigation\
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf4 \strokec4 OPTIONAL - You might also see in other applications that use React Router, on the\'a0index.js\'a0they are not wrapping the\'a0App\'a0component in the\'a0BrowserRouter\'a0component. This can happen, but on\'a0App.js\'a0this is an example of how it would be imported:\
\pard\pardeftab720\partightenfactor0
\cf9 \strokec9 	import\cf4 \strokec4  \{ \cf10 \strokec10 BrowserRouter\cf4 \strokec4  \cf9 \strokec9 as\cf4 \strokec4  \cf10 \strokec10 Router\cf4 \strokec4 , \cf10 \strokec10 Switch\cf4 \strokec4 , \cf10 \strokec10 Route\cf4 \strokec4  \} \cf9 \strokec9 from\cf4 \strokec4  \cf11 \strokec11 'react-router-dom'\cf4 \strokec4 ;\
Then if you render everything in a wrapped\'a0<Router></Router>\'a0component, this will produce the same effect. Both methods work fine, and it is up to you how you want to apply it. For the rest of this lesson however, we would be going with the first method shown where\'a0BrowserRouter\'a0wraps the\'a0App\'a0component on\'a0index.js\'94\
\
Everything on inside of Routes tag is Route definitions for URL paths\
Each Route takes a path & an element\
\
Link works like an <a/> tag use to attr instead of href\
\
<nav/> will always render the same regardless of route if it is outside the Routes tag\
What is inside the <Routes/> tag will not change when route changes\
Routing is thus still useful on single page apps. Page doesn\'92t refresh, but components are switched out so it appears different.\
\
Check react.dev docs on Routing, Next.js?\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 Dynamic Routes\cf4 \ulnone \strokec4 \
If something exists, create a route to it (e.g., if a subreddit exists, be able to route to it); otherwise load a general custom \'93could not be found\'94/error/404 component\
\pard\pardeftab720\partightenfactor0
\cf12 \outl0\strokewidth0 Component will render based on the dynamic parameter\
Allows you to define one route, but make it look different depending on the params passed\
\pard\pardeftab720\partightenfactor0
\cf4 \outl0\strokewidth0 \strokec4 \
App.js\
\pard\pardeftab720\partightenfactor0
\cf4 <\cf8 \strokec8 Route\cf4 \strokec4  \cf6 \strokec6 path\cf3 \strokec3 =\cf5 \strokec5 "/games/:id"\cf4 \strokec4  \cf6 \strokec6 element\cf3 \strokec3 =\{\cf4 \strokec4 <\cf8 \strokec8 Game\cf4 \strokec4  />\cf3 \strokec3 \}\cf4 \strokec4  />\
\
Need to import useParams from \'91react-router-dom\'92 in Game.js\
\
\pard\pardeftab720\partightenfactor0
\cf12 \outl0\strokewidth0 Game.js\cf4 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 import\cf4 \strokec4  \{ useParams \}\cf3 \strokec3  from\cf4 \strokec4  \cf5 \strokec5 'react-router-dom'\cf4 \strokec4 ;\
\cf3 \strokec3 const\cf4 \strokec4  \{ \cf6 \strokec6 id\cf4 \strokec4  \}\cf3 \strokec3  =\cf4 \strokec4  \cf7 \strokec7 useParams\cf4 \strokec4 ();\
	This standard uses syntax for custom hook\
\
Call param same name as what it is called on Route\
One component that is changing based on params data passed to it\
Referencing it in JSX:\
	<\cf8 \strokec8 h1\cf4 \strokec4 >This is info for the game \cf3 \strokec3 \{\cf6 \strokec6 id\cf3 \strokec3 \}\cf4 \strokec4 </\cf8 \strokec8 h1\cf4 \strokec4 >\
Will display what the id is, in this case, what is after \'93games/\'93 in the URL\
Test it by typing in whatever id you want into the URL (can be handled different, this is for learning/testing)\
Useful for user pages/profiles url.com/user/username\
\
\
*Can you have a custom component to handle all Routing code & import that into App, or must work be done at App.js level?\
See Nested Routes\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 Handling User Input\cf4 \ulnone \strokec4 \
<\cf8 \strokec8 Route\cf4 \strokec4  \cf6 \strokec6 path\cf3 \strokec3 =\cf5 \strokec5 "/games/new"\cf4 \strokec4  \cf6 \strokec6 element\cf3 \strokec3 =\{\cf4 \strokec4 <\cf8 \strokec8 NewGame\cf4 \strokec4  />\cf3 \strokec3 \}\cf4 \strokec4  />\
\pard\pardeftab720\partightenfactor0
\cf12 \outl0\strokewidth0 define the specific parameter \'93new\'94; otherwise if the app sees \cf13 "/games/new"\cf12   in the URL, it\cf4 \outl0\strokewidth0 \strokec4  will think there is a dynamic parameter with input of \'93new\'94\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 Link Element\ulnone \
If you want to display this route on the UI instead of accessing it via a URL, you need a <Link/> element\
\pard\pardeftab720\partightenfactor0
\cf4 <\cf8 \strokec8 Link\cf4 \strokec4  \cf6 \strokec6 to\cf3 \strokec3 =\cf5 \strokec5 "/games/new"\cf4 \strokec4 >New Game</\cf8 \strokec8 Link\cf4 \strokec4 >\
\
Link elements with nothing in between them will not show any text on the UI to click on\
\pard\pardeftab720\partightenfactor0
\cf4 \
Order no longer matters when listing Route definitions (it used to, but now it is smarter)\
\pard\pardeftab720\partightenfactor0
\cf4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 Error Handling\cf4 \ulnone \strokec4 \
<\cf8 \strokec8 Route\cf4 \strokec4  \cf6 \strokec6 path\cf3 \strokec3 =\cf5 \strokec5 "*"\cf4 \strokec4  \cf6 \strokec6 element\cf3 \strokec3 =\{\cf4 \strokec4 <\cf8 \strokec8 NotFound\cf4 \strokec4  />\cf3 \strokec3 \}\cf4 \strokec4  />\
* means anything, so any URL can route to this element to display, e.g., gibberish URL would display not found component\
If a URL is defined as a Route, it will override this to display the correct component; else error & display not found component\
\
\
\
\cf4 \ul \ulc4 \strokec4 Nesting Routes\cf4 \ulnone \strokec4 \
<\cf10 \strokec10 Routes\cf4 \strokec4 >\
    \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 path\cf14 \strokec14 =\cf11 \strokec11 "/"\cf14 \strokec14  \cf15 \strokec15 element\cf14 \strokec14 =\cf11 \strokec11 \{\cf14 \strokec14 <\cf15 \strokec15 Home\cf14 \strokec14  />\cf4 \strokec4 \} />\
    \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 path\cf14 \strokec14 =\cf11 \strokec11 "/games"\cf14 \strokec14 >\cf4 \strokec4 \
        \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 index\cf14 \strokec14  \cf15 \strokec15 element\cf14 \strokec14 =\cf11 \strokec11 \{\cf14 \strokec14 <\cf15 \strokec15 GameList\cf14 \strokec14  />\cf4 \strokec4 \} />\
        \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 path\cf14 \strokec14 =\cf11 \strokec11 ":id"\cf14 \strokec14  \cf15 \strokec15 element\cf14 \strokec14 =\cf11 \strokec11 \{\cf14 \strokec14 <\cf15 \strokec15 Game\cf14 \strokec14  />\cf4 \strokec4 \} />\
        \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 path\cf14 \strokec14 =\cf11 \strokec11 "new"\cf14 \strokec14  \cf15 \strokec15 element\cf14 \strokec14 =\cf11 \strokec11 \{\cf14 \strokec14 <\cf15 \strokec15 NewGame\cf14 \strokec14  />\cf4 \strokec4 \} />\
    \cf14 \strokec14 </\cf9 \strokec9 Route\cf14 \strokec14 >\cf4 \strokec4 \
    \cf14 \strokec14 <\cf9 \strokec9 Route\cf14 \strokec14  \cf15 \strokec15 path\cf14 \strokec14 =\cf11 \strokec11 "*"\cf14 \strokec14  \cf15 \strokec15 element\cf14 \strokec14 =\cf11 \strokec11 \{\cf14 \strokec14 <\cf15 \strokec15 NotFound\cf14 \strokec14  />\cf4 \strokec4 \} />\
</\cf10 \strokec10 Routes\cf4 \strokec4 >\
\
\
\'93This nesting is pretty simple to do. All you need to do is make a parent\'a0Route\'a0that has the\'a0path\'a0prop set to the shared path for all your child\'a0Route\'a0components. Then inside the parent\'a0Route\'a0you can put all the child\'a0Route\'a0components. The only difference is that the\'a0path\'a0prop of the child\'a0Route\'a0components no longer includes the shared\'a0/games\'a0route. Also, the route for\'a0/games\'a0is replaced with a\'a0Route\'a0component that has no\'a0path\'a0prop, but instead has an\'a0index\'a0prop. All this is saying is that the path of the index\'a0Route\'a0is the same as the parent\'a0Route.\'94\
\
Useful for shared layouts\
\
\
\cf4 \ul \ulc4 \strokec4 Shared Layouts & Outlets\cf4 \ulnone \strokec4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 If you want something at the base level, write path instead of index (? review)\
\
From class README:\cf4 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \strokec4 Problem: \'93to render a nav section with links to each game as well the new game form from any of our game pages [\'85] normally we would need to make a shared component to store this navigation and then import that into every single game related component.\'94\
Solution: \'93If you pass an\'a0element\'a0prop to a parent route it will render that component for every single child\'a0Route\'a0which means you can put a shared nav or other shared components on every child page with ease.\'94\
\'93whenever we match a route inside the\'a0/game\'a0parent\'a0Route\'a0it will render the\'a0GamesLayout\'a0component which contains our shared navigation. Then whichever child\'a0Route\'a0is matched will be rendered wherever the\'a0Outlet\'a0component is placed inside our layout component. The\'a0Outlet\'a0component is essentially a placeholder component that will render whatever our current page's content is. This structure is incredibly useful and makes sharing code between routes incredibly easy.\'94\
\
\
Outlet tag will be in GamesList under nav tag for sub-nav that navs between games\
	<nav>\'85</nav/>\
	<Outlet/>\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 Outlet Context\cf4 \ulnone \strokec4 \
Outlet can take a context prop which will work just like React context.\
\pard\pardeftab720\partightenfactor0
\cf4 \cb16 	<\cf8 \cb16 \strokec8 Outlet\cf4 \cb16 \strokec4  \cf6 \strokec6 context\cf3 \strokec3 =\{\cf4 \strokec4 \{hello\cf6 \strokec6 :\cf4 \strokec4  \cf5 \strokec5 "world"\cf4 \strokec4 \}\cf3 \strokec3 \}\cf4 \strokec4 />\
\cb1 \
Context can stay same if dynamic param changes\
Useful for login sessions, etc; can pass in context of username that is logged in\cb16 \
\cf17 \
\pard\pardeftab720\partightenfactor0
\cf17 \cb16 \strokec18 Outlet context allows for passing shared data to shared layouts, can pass data from App level to GamesList, then context allows you to pass down from GamesList to Game or NewGame \cf4 \cb1 \strokec4 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 React-Router Lab (space-mission)\cf4 \ulnone \strokec4 \
npm i react-router-dom axios\
\pard\pardeftab720\partightenfactor0
\cf17 \cb2 \
\pard\pardeftab720\partightenfactor0
\cf17 \strokec18 Wrap component elements in the <Route> element & add them to the <Routes> elements.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf19 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Why do we need to reference data.photo.prop on the Photo component, when data.photo is being passed to Photo components already in the map? Shouldn\'92t it just be data.prop on the Photo component, where data is the photo being mapped to custom Photo instances?\cf17 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf17 \
\
\ul Common Conditional (Ternanry) Operator Statement Patterns\ulnone \

\f2\i \cf4 \cb16 If not loading & data exists, map data to elements; else, show loading animation:
\f1\i0 \
<>\
	\cf3 \strokec3 \{ !\cf6 \strokec6 loading\cf3 \strokec3  &&\cf4 \strokec4  \cf6 \strokec6 data\cf4 \strokec4  \cf3 \strokec3 ?\cf4 \strokec4  \cf6 \strokec6 data\cf3 \strokec3 .\cf4 \strokec4 photos\cf3 \strokec3 .\cf7 \strokec7 map\cf4 \strokec4 ((\cf20 \strokec20 photo\cf4 \strokec4 ) \cf3 \strokec3 =>\cf4 \strokec4  <\cf8 \cb16 \strokec8 Photo\cf4 \cb16 \strokec4  \cf6 \strokec6 key\cf3 \strokec3 =\{\cf20 \strokec20 photo\cf3 \strokec3 .\cf4 \strokec4 id\cf3 \strokec3 \}\cf4 \strokec4  \cf6 \strokec6 photo\cf3 \strokec3 =\{\cf20 \strokec20 photo\cf3 \strokec3 \}\cf4 \strokec4  />) \cf3 \strokec3 :\cf4 \strokec4  <\cf8 \cb16 \strokec8 Spinner\cf4 \cb16 \strokec4 /> \cf3 \strokec3 \}\cf4 \cb1 \strokec4 \
\cb16 </>\cb1 \
\cf17 \cb2 \
\
\
\ul useEffect() Continued\ulnone \
https://react.dev/reference/react/useEffect#fetching-data-with-effects\
https://react.dev/reference/react/useEffect#specifying-reactive-dependencies\
\pard\pardeftab720\partightenfactor0
\cf17 \strokec21 \'93{\field{\*\fldinst{HYPERLINK "https://react.dev/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means"}}{\fldrslt \cf21 \cb16 An Effect with empty dependencies}}\cf22 \cb16 \strokec22  doesn\'92t re-run when any of your component\'92s props or state change.\'94\cf17 \cb2 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 https://react.dev/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \ul \ulc0 \outl0\strokewidth0 React Portfolio Exercise Idea\ulnone \
Spotify visualization using Nasa videos\
Incorporates both music players & video players\
\pard\pardeftab720\partightenfactor0
\cf12 \cb2 Nasa API: {\field{\*\fldinst{HYPERLINK "https://api.nasa.gov/"}}{\fldrslt \cf0 \cb1 \ul \ulc0 https://api.nasa.gov/}}\cf0 \cb1 \
\cf12 \cb2 Nasa API Docs: \cf0 \cb1 https://images.nasa.gov/docs/images.nasa.gov_api_docs.pdf\
Nasa image/video DB: https://images.nasa.gov/#/\cf4 \cb2 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\
\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 Other\cf4 \ulnone \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf12 \outl0\strokewidth0 Render for hosting\
	Need to run npm run build\
\
https://reactjsexample.com/\cf0 \cb1 \outl0\strokewidth0 \strokec17 \
\cf12 \cb2 \outl0\strokewidth0 \
DataIsBeautiful subreddit\
\
<ul><li><Link> is clunky, what are alternatives?\cf4 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\tx720\tx1440\pardeftab720\partightenfactor0
\cf4 \strokec4 If a question leads to the next part of the lesson, it\'92s a good question\
\
Emphasis on readability over small number of lines in file: I would rather scroll down than squint or spend time parsing long one-line statements\
Hierarchical\
However, I still like to make files have as few lines of code as possible outside of spacing by leveraging componentization, file structure, & file imports}